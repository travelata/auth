// Code generated by mockery v2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	auth "github.com/travelata/auth/proto"
)

// SampleServiceClient is an autogenerated mock type for the SampleServiceClient type
type SampleServiceClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *SampleServiceClient) Create(ctx context.Context, in *auth.CreateSampleRequest, opts ...grpc.CallOption) (*auth.Sample, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.Sample
	if rf, ok := ret.Get(0).(func(context.Context, *auth.CreateSampleRequest, ...grpc.CallOption) *auth.Sample); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Sample)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.CreateSampleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *SampleServiceClient) Delete(ctx context.Context, in *auth.SampleIdRequest, opts ...grpc.CallOption) (*auth.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.SampleIdRequest, ...grpc.CallOption) *auth.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.SampleIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *SampleServiceClient) Get(ctx context.Context, in *auth.SampleIdRequest, opts ...grpc.CallOption) (*auth.Sample, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.Sample
	if rf, ok := ret.Get(0).(func(context.Context, *auth.SampleIdRequest, ...grpc.CallOption) *auth.Sample); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Sample)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.SampleIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, in, opts
func (_m *SampleServiceClient) Search(ctx context.Context, in *auth.SearchCriteria, opts ...grpc.CallOption) (*auth.SearchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.SearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.SearchCriteria, ...grpc.CallOption) *auth.SearchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.SearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.SearchCriteria, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *SampleServiceClient) Update(ctx context.Context, in *auth.UpdateSampleRequest, opts ...grpc.CallOption) (*auth.Sample, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.Sample
	if rf, ok := ret.Get(0).(func(context.Context, *auth.UpdateSampleRequest, ...grpc.CallOption) *auth.Sample); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Sample)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.UpdateSampleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
